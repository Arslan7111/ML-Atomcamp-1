# -*- coding: utf-8 -*-
"""ML assignment 1 Part 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18swRfiGvOTJuT6eWrVvZpWdErQ-oBb4-

Data Preprocessing
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

# Load dataset
df = pd.read_csv('Social_Network_Ads.csv')

# Drop User ID column
df.drop('User ID', axis=1, inplace=True)

# Encode Gender
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])  # Male:1, Female:0

# Encode target variable
df['Purchased'] = df['Purchased'].astype(int)

# Features and target
X = df[['Age', 'EstimatedSalary']]
y = df['Purchased']

# Standardize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

"""Model Building"""

from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier

# Models
gnb = GaussianNB()
knn3 = KNeighborsClassifier(n_neighbors=3)
knn5 = KNeighborsClassifier(n_neighbors=5)
knn7 = KNeighborsClassifier(n_neighbors=7)
dt_gini = DecisionTreeClassifier(criterion='gini', random_state=42)
dt_entropy = DecisionTreeClassifier(criterion='entropy', random_state=42)

# Fit models
gnb.fit(X_train, y_train)
knn3.fit(X_train, y_train)
knn5.fit(X_train, y_train)
knn7.fit(X_train, y_train)
dt_gini.fit(X_train, y_train)
dt_entropy.fit(X_train, y_train)

"""Model Evaluation"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

def evaluate_model(name, model, X_test, y_test):
    y_pred = model.predict(X_test)
    print(f"\nðŸ“Œ {name}")
    print("Accuracy :", accuracy_score(y_test, y_pred))
    print("Precision:", precision_score(y_test, y_pred))
    print("Recall   :", recall_score(y_test, y_pred))
    print("F1 Score :", f1_score(y_test, y_pred))
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Evaluate all models
evaluate_model("Gaussian Naive Bayes", gnb, X_test, y_test)
evaluate_model("KNN (k=3)", knn3, X_test, y_test)
evaluate_model("KNN (k=5)", knn5, X_test, y_test)
evaluate_model("KNN (k=7)", knn7, X_test, y_test)
evaluate_model("Decision Tree (Gini)", dt_gini, X_test, y_test)
evaluate_model("Decision Tree (Entropy)", dt_entropy, X_test, y_test)

"""Plot Decision Boundaries"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

def plot_decision_boundary(model, title):
    X_set, y_set = X_test, y_test
    X1, X2 = np.meshgrid(
        np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
        np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01)
    )
    plt.figure(figsize=(6, 4))
    plt.contourf(X1, X2, model.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
                 alpha = 0.75, cmap = ListedColormap(('red', 'green')))
    plt.xlim(X1.min(), X1.max())
    plt.ylim(X2.min(), X2.max())
    for i, j in enumerate(np.unique(y_set)):
        plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                    c = ListedColormap(('red', 'green'))(i), label = j)
    plt.title(title)
    plt.xlabel('Age (scaled)')
    plt.ylabel('EstimatedSalary (scaled)')
    plt.legend()
    plt.show()

# Example:
plot_decision_boundary(knn5, "KNN (k=5) Decision Boundary")